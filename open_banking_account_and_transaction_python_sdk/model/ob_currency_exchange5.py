# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from open_banking_account_and_transaction_python_sdk import schemas  # noqa: F401


class OBCurrencyExchange5(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Set of elements used to provide details on the currency exchange.
    """


    class MetaOapg:
        required = {
            "SourceCurrency",
            "ExchangeRate",
        }
        
        class properties:
            ExchangeRate = schemas.NumberSchema
            
            
            class SourceCurrency(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[A-Z]{3,3}$',
                    }]
            
            
            class ContractIdentification(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 35
                    min_length = 1
        
            @staticmethod
            def InstructedAmount() -> typing.Type['OBCurrencyExchange5InstructedAmount']:
                return OBCurrencyExchange5InstructedAmount
            QuotationDate = schemas.DateTimeSchema
            
            
            class TargetCurrency(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[A-Z]{3,3}$',
                    }]
            
            
            class UnitCurrency(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[A-Z]{3,3}$',
                    }]
            __annotations__ = {
                "ExchangeRate": ExchangeRate,
                "SourceCurrency": SourceCurrency,
                "ContractIdentification": ContractIdentification,
                "InstructedAmount": InstructedAmount,
                "QuotationDate": QuotationDate,
                "TargetCurrency": TargetCurrency,
                "UnitCurrency": UnitCurrency,
            }
    
    SourceCurrency: MetaOapg.properties.SourceCurrency
    ExchangeRate: MetaOapg.properties.ExchangeRate
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ExchangeRate"]) -> MetaOapg.properties.ExchangeRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SourceCurrency"]) -> MetaOapg.properties.SourceCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ContractIdentification"]) -> MetaOapg.properties.ContractIdentification: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["InstructedAmount"]) -> 'OBCurrencyExchange5InstructedAmount': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["QuotationDate"]) -> MetaOapg.properties.QuotationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TargetCurrency"]) -> MetaOapg.properties.TargetCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["UnitCurrency"]) -> MetaOapg.properties.UnitCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ExchangeRate", "SourceCurrency", "ContractIdentification", "InstructedAmount", "QuotationDate", "TargetCurrency", "UnitCurrency", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ExchangeRate"]) -> MetaOapg.properties.ExchangeRate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SourceCurrency"]) -> MetaOapg.properties.SourceCurrency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ContractIdentification"]) -> typing.Union[MetaOapg.properties.ContractIdentification, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["InstructedAmount"]) -> typing.Union['OBCurrencyExchange5InstructedAmount', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["QuotationDate"]) -> typing.Union[MetaOapg.properties.QuotationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TargetCurrency"]) -> typing.Union[MetaOapg.properties.TargetCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["UnitCurrency"]) -> typing.Union[MetaOapg.properties.UnitCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ExchangeRate", "SourceCurrency", "ContractIdentification", "InstructedAmount", "QuotationDate", "TargetCurrency", "UnitCurrency", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        SourceCurrency: typing.Union[MetaOapg.properties.SourceCurrency, str, ],
        ExchangeRate: typing.Union[MetaOapg.properties.ExchangeRate, decimal.Decimal, int, float, ],
        ContractIdentification: typing.Union[MetaOapg.properties.ContractIdentification, str, schemas.Unset] = schemas.unset,
        InstructedAmount: typing.Union['OBCurrencyExchange5InstructedAmount', schemas.Unset] = schemas.unset,
        QuotationDate: typing.Union[MetaOapg.properties.QuotationDate, str, datetime, schemas.Unset] = schemas.unset,
        TargetCurrency: typing.Union[MetaOapg.properties.TargetCurrency, str, schemas.Unset] = schemas.unset,
        UnitCurrency: typing.Union[MetaOapg.properties.UnitCurrency, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OBCurrencyExchange5':
        return super().__new__(
            cls,
            *args,
            SourceCurrency=SourceCurrency,
            ExchangeRate=ExchangeRate,
            ContractIdentification=ContractIdentification,
            InstructedAmount=InstructedAmount,
            QuotationDate=QuotationDate,
            TargetCurrency=TargetCurrency,
            UnitCurrency=UnitCurrency,
            _configuration=_configuration,
            **kwargs,
        )

from open_banking_account_and_transaction_python_sdk.model.ob_currency_exchange5_instructed_amount import OBCurrencyExchange5InstructedAmount
