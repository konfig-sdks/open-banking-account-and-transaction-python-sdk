# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from open_banking_account_and_transaction_python_sdk import schemas  # noqa: F401


class OBPCAData1ProductDetailsSegment(
    schemas.ListSchema
):
    """NOTE:
    This class is auto generated by Konfig (https://konfigthis.com)

    Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.

Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd 
With respect to PCA products, they are segmented in relation to different markets that they wish to focus on. 
    """


    class MetaOapg:
        
        
        class items(
            schemas.EnumBase,
            schemas.StrSchema
        ):
        
        
            class MetaOapg:
                enum_value_to_name = {
                    "Basic": "BASIC",
                    "BenefitAndReward": "BENEFIT_AND_REWARD",
                    "CreditInterest": "CREDIT_INTEREST",
                    "Cashback": "CASHBACK",
                    "General": "GENERAL",
                    "Graduate": "GRADUATE",
                    "Other": "OTHER",
                    "Overdraft": "OVERDRAFT",
                    "Packaged": "PACKAGED",
                    "Premium": "PREMIUM",
                    "Reward": "REWARD",
                    "Student": "STUDENT",
                    "YoungAdult": "YOUNG_ADULT",
                    "Youth": "YOUTH",
                }
            
            @schemas.classproperty
            def BASIC(cls):
                return cls("Basic")
            
            @schemas.classproperty
            def BENEFIT_AND_REWARD(cls):
                return cls("BenefitAndReward")
            
            @schemas.classproperty
            def CREDIT_INTEREST(cls):
                return cls("CreditInterest")
            
            @schemas.classproperty
            def CASHBACK(cls):
                return cls("Cashback")
            
            @schemas.classproperty
            def GENERAL(cls):
                return cls("General")
            
            @schemas.classproperty
            def GRADUATE(cls):
                return cls("Graduate")
            
            @schemas.classproperty
            def OTHER(cls):
                return cls("Other")
            
            @schemas.classproperty
            def OVERDRAFT(cls):
                return cls("Overdraft")
            
            @schemas.classproperty
            def PACKAGED(cls):
                return cls("Packaged")
            
            @schemas.classproperty
            def PREMIUM(cls):
                return cls("Premium")
            
            @schemas.classproperty
            def REWARD(cls):
                return cls("Reward")
            
            @schemas.classproperty
            def STUDENT(cls):
                return cls("Student")
            
            @schemas.classproperty
            def YOUNG_ADULT(cls):
                return cls("YoungAdult")
            
            @schemas.classproperty
            def YOUTH(cls):
                return cls("Youth")

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'OBPCAData1ProductDetailsSegment':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
