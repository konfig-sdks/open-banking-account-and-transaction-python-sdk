# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from open_banking_account_and_transaction_python_sdk import schemas  # noqa: F401


class OBParty2AddressItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Postal address of a party.
    """


    class MetaOapg:
        required = {
            "Country",
        }
        
        class properties:
        
            @staticmethod
            def Country() -> typing.Type['CountryCode']:
                return CountryCode
        
            @staticmethod
            def AddressLine() -> typing.Type['OBParty2AddressItemAddressLine']:
                return OBParty2AddressItemAddressLine
        
            @staticmethod
            def AddressType() -> typing.Type['OBAddressTypeCode']:
                return OBAddressTypeCode
        
            @staticmethod
            def BuildingNumber() -> typing.Type['BuildingNumber']:
                return BuildingNumber
        
            @staticmethod
            def CountrySubDivision() -> typing.Type['CountrySubDivision']:
                return CountrySubDivision
        
            @staticmethod
            def PostCode() -> typing.Type['PostCode']:
                return PostCode
        
            @staticmethod
            def StreetName() -> typing.Type['StreetName']:
                return StreetName
        
            @staticmethod
            def TownName() -> typing.Type['TownName']:
                return TownName
            __annotations__ = {
                "Country": Country,
                "AddressLine": AddressLine,
                "AddressType": AddressType,
                "BuildingNumber": BuildingNumber,
                "CountrySubDivision": CountrySubDivision,
                "PostCode": PostCode,
                "StreetName": StreetName,
                "TownName": TownName,
            }
    
    Country: 'CountryCode'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Country"]) -> 'CountryCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AddressLine"]) -> 'OBParty2AddressItemAddressLine': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AddressType"]) -> 'OBAddressTypeCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BuildingNumber"]) -> 'BuildingNumber': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CountrySubDivision"]) -> 'CountrySubDivision': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PostCode"]) -> 'PostCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["StreetName"]) -> 'StreetName': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TownName"]) -> 'TownName': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Country", "AddressLine", "AddressType", "BuildingNumber", "CountrySubDivision", "PostCode", "StreetName", "TownName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Country"]) -> 'CountryCode': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AddressLine"]) -> typing.Union['OBParty2AddressItemAddressLine', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AddressType"]) -> typing.Union['OBAddressTypeCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BuildingNumber"]) -> typing.Union['BuildingNumber', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CountrySubDivision"]) -> typing.Union['CountrySubDivision', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PostCode"]) -> typing.Union['PostCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["StreetName"]) -> typing.Union['StreetName', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TownName"]) -> typing.Union['TownName', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Country", "AddressLine", "AddressType", "BuildingNumber", "CountrySubDivision", "PostCode", "StreetName", "TownName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        Country: 'CountryCode',
        AddressLine: typing.Union['OBParty2AddressItemAddressLine', schemas.Unset] = schemas.unset,
        AddressType: typing.Union['OBAddressTypeCode', schemas.Unset] = schemas.unset,
        BuildingNumber: typing.Union['BuildingNumber', schemas.Unset] = schemas.unset,
        CountrySubDivision: typing.Union['CountrySubDivision', schemas.Unset] = schemas.unset,
        PostCode: typing.Union['PostCode', schemas.Unset] = schemas.unset,
        StreetName: typing.Union['StreetName', schemas.Unset] = schemas.unset,
        TownName: typing.Union['TownName', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OBParty2AddressItem':
        return super().__new__(
            cls,
            *args,
            Country=Country,
            AddressLine=AddressLine,
            AddressType=AddressType,
            BuildingNumber=BuildingNumber,
            CountrySubDivision=CountrySubDivision,
            PostCode=PostCode,
            StreetName=StreetName,
            TownName=TownName,
            _configuration=_configuration,
            **kwargs,
        )

from open_banking_account_and_transaction_python_sdk.model.building_number import BuildingNumber
from open_banking_account_and_transaction_python_sdk.model.country_code import CountryCode
from open_banking_account_and_transaction_python_sdk.model.country_sub_division import CountrySubDivision
from open_banking_account_and_transaction_python_sdk.model.ob_address_type_code import OBAddressTypeCode
from open_banking_account_and_transaction_python_sdk.model.ob_party2_address_item_address_line import OBParty2AddressItemAddressLine
from open_banking_account_and_transaction_python_sdk.model.post_code import PostCode
from open_banking_account_and_transaction_python_sdk.model.street_name import StreetName
from open_banking_account_and_transaction_python_sdk.model.town_name import TownName
