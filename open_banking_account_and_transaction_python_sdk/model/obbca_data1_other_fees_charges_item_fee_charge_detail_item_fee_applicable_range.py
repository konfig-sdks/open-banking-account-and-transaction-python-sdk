# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from open_banking_account_and_transaction_python_sdk import schemas  # noqa: F401


class OBBCAData1OtherFeesChargesItemFeeChargeDetailItemFeeApplicableRange(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Range or amounts or rates for which the fee/charge applies
    """


    class MetaOapg:
        
        class properties:
            
            
            class MaximumAmount(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$',
                    }]
            
            
            class MaximumRate(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$',
                    }]
            
            
            class MinimumAmount(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$',
                    }]
            
            
            class MinimumRate(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$',
                    }]
            __annotations__ = {
                "MaximumAmount": MaximumAmount,
                "MaximumRate": MaximumRate,
                "MinimumAmount": MinimumAmount,
                "MinimumRate": MinimumRate,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MaximumAmount"]) -> MetaOapg.properties.MaximumAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MaximumRate"]) -> MetaOapg.properties.MaximumRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MinimumAmount"]) -> MetaOapg.properties.MinimumAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MinimumRate"]) -> MetaOapg.properties.MinimumRate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["MaximumAmount", "MaximumRate", "MinimumAmount", "MinimumRate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MaximumAmount"]) -> typing.Union[MetaOapg.properties.MaximumAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MaximumRate"]) -> typing.Union[MetaOapg.properties.MaximumRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MinimumAmount"]) -> typing.Union[MetaOapg.properties.MinimumAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MinimumRate"]) -> typing.Union[MetaOapg.properties.MinimumRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["MaximumAmount", "MaximumRate", "MinimumAmount", "MinimumRate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        MaximumAmount: typing.Union[MetaOapg.properties.MaximumAmount, str, schemas.Unset] = schemas.unset,
        MaximumRate: typing.Union[MetaOapg.properties.MaximumRate, str, schemas.Unset] = schemas.unset,
        MinimumAmount: typing.Union[MetaOapg.properties.MinimumAmount, str, schemas.Unset] = schemas.unset,
        MinimumRate: typing.Union[MetaOapg.properties.MinimumRate, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OBBCAData1OtherFeesChargesItemFeeChargeDetailItemFeeApplicableRange':
        return super().__new__(
            cls,
            *args,
            MaximumAmount=MaximumAmount,
            MaximumRate=MaximumRate,
            MinimumAmount=MinimumAmount,
            MinimumRate=MinimumRate,
            _configuration=_configuration,
            **kwargs,
        )
