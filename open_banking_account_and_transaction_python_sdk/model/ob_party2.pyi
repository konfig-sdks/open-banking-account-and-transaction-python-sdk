# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from open_banking_account_and_transaction_python_sdk import schemas  # noqa: F401


class OBParty2(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "PartyId",
        }
        
        class properties:
        
            @staticmethod
            def PartyId() -> typing.Type['PartyId']:
                return PartyId
            AccountRole = schemas.StrSchema
        
            @staticmethod
            def Address() -> typing.Type['OBParty2Address']:
                return OBParty2Address
            BeneficialOwnership = schemas.BoolSchema
        
            @staticmethod
            def EmailAddress() -> typing.Type['EmailAddress']:
                return EmailAddress
        
            @staticmethod
            def FullLegalName() -> typing.Type['FullLegalName']:
                return FullLegalName
            LegalStructure = schemas.StrSchema
        
            @staticmethod
            def Mobile() -> typing.Type['PhoneNumber1']:
                return PhoneNumber1
        
            @staticmethod
            def Name() -> typing.Type['Name3']:
                return Name3
        
            @staticmethod
            def PartyNumber() -> typing.Type['PartyNumber']:
                return PartyNumber
        
            @staticmethod
            def PartyType() -> typing.Type['OBExternalPartyType1Code']:
                return OBExternalPartyType1Code
        
            @staticmethod
            def Phone() -> typing.Type['PhoneNumber0']:
                return PhoneNumber0
        
            @staticmethod
            def Relationships() -> typing.Type['OBPartyRelationships1']:
                return OBPartyRelationships1
            __annotations__ = {
                "PartyId": PartyId,
                "AccountRole": AccountRole,
                "Address": Address,
                "BeneficialOwnership": BeneficialOwnership,
                "EmailAddress": EmailAddress,
                "FullLegalName": FullLegalName,
                "LegalStructure": LegalStructure,
                "Mobile": Mobile,
                "Name": Name,
                "PartyNumber": PartyNumber,
                "PartyType": PartyType,
                "Phone": Phone,
                "Relationships": Relationships,
            }
    
    PartyId: 'PartyId'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PartyId"]) -> 'PartyId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AccountRole"]) -> MetaOapg.properties.AccountRole: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Address"]) -> 'OBParty2Address': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BeneficialOwnership"]) -> MetaOapg.properties.BeneficialOwnership: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EmailAddress"]) -> 'EmailAddress': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FullLegalName"]) -> 'FullLegalName': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LegalStructure"]) -> MetaOapg.properties.LegalStructure: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Mobile"]) -> 'PhoneNumber1': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Name"]) -> 'Name3': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PartyNumber"]) -> 'PartyNumber': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PartyType"]) -> 'OBExternalPartyType1Code': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Phone"]) -> 'PhoneNumber0': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Relationships"]) -> 'OBPartyRelationships1': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["PartyId", "AccountRole", "Address", "BeneficialOwnership", "EmailAddress", "FullLegalName", "LegalStructure", "Mobile", "Name", "PartyNumber", "PartyType", "Phone", "Relationships", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PartyId"]) -> 'PartyId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AccountRole"]) -> typing.Union[MetaOapg.properties.AccountRole, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Address"]) -> typing.Union['OBParty2Address', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BeneficialOwnership"]) -> typing.Union[MetaOapg.properties.BeneficialOwnership, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EmailAddress"]) -> typing.Union['EmailAddress', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FullLegalName"]) -> typing.Union['FullLegalName', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LegalStructure"]) -> typing.Union[MetaOapg.properties.LegalStructure, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Mobile"]) -> typing.Union['PhoneNumber1', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Name"]) -> typing.Union['Name3', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PartyNumber"]) -> typing.Union['PartyNumber', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PartyType"]) -> typing.Union['OBExternalPartyType1Code', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Phone"]) -> typing.Union['PhoneNumber0', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Relationships"]) -> typing.Union['OBPartyRelationships1', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["PartyId", "AccountRole", "Address", "BeneficialOwnership", "EmailAddress", "FullLegalName", "LegalStructure", "Mobile", "Name", "PartyNumber", "PartyType", "Phone", "Relationships", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        PartyId: 'PartyId',
        AccountRole: typing.Union[MetaOapg.properties.AccountRole, str, schemas.Unset] = schemas.unset,
        Address: typing.Union['OBParty2Address', schemas.Unset] = schemas.unset,
        BeneficialOwnership: typing.Union[MetaOapg.properties.BeneficialOwnership, bool, schemas.Unset] = schemas.unset,
        EmailAddress: typing.Union['EmailAddress', schemas.Unset] = schemas.unset,
        FullLegalName: typing.Union['FullLegalName', schemas.Unset] = schemas.unset,
        LegalStructure: typing.Union[MetaOapg.properties.LegalStructure, str, schemas.Unset] = schemas.unset,
        Mobile: typing.Union['PhoneNumber1', schemas.Unset] = schemas.unset,
        Name: typing.Union['Name3', schemas.Unset] = schemas.unset,
        PartyNumber: typing.Union['PartyNumber', schemas.Unset] = schemas.unset,
        PartyType: typing.Union['OBExternalPartyType1Code', schemas.Unset] = schemas.unset,
        Phone: typing.Union['PhoneNumber0', schemas.Unset] = schemas.unset,
        Relationships: typing.Union['OBPartyRelationships1', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OBParty2':
        return super().__new__(
            cls,
            *args,
            PartyId=PartyId,
            AccountRole=AccountRole,
            Address=Address,
            BeneficialOwnership=BeneficialOwnership,
            EmailAddress=EmailAddress,
            FullLegalName=FullLegalName,
            LegalStructure=LegalStructure,
            Mobile=Mobile,
            Name=Name,
            PartyNumber=PartyNumber,
            PartyType=PartyType,
            Phone=Phone,
            Relationships=Relationships,
            _configuration=_configuration,
            **kwargs,
        )

from open_banking_account_and_transaction_python_sdk.model.email_address import EmailAddress
from open_banking_account_and_transaction_python_sdk.model.full_legal_name import FullLegalName
from open_banking_account_and_transaction_python_sdk.model.name3 import Name3
from open_banking_account_and_transaction_python_sdk.model.ob_external_party_type1_code import OBExternalPartyType1Code
from open_banking_account_and_transaction_python_sdk.model.ob_party2_address import OBParty2Address
from open_banking_account_and_transaction_python_sdk.model.ob_party_relationships1 import OBPartyRelationships1
from open_banking_account_and_transaction_python_sdk.model.party_id import PartyId
from open_banking_account_and_transaction_python_sdk.model.party_number import PartyNumber
from open_banking_account_and_transaction_python_sdk.model.phone_number0 import PhoneNumber0
from open_banking_account_and_transaction_python_sdk.model.phone_number1 import PhoneNumber1
