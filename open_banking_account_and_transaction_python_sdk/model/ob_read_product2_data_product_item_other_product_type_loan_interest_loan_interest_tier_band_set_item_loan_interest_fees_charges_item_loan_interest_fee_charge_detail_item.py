# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from open_banking_account_and_transaction_python_sdk import schemas  # noqa: F401


class OBReadProduct2DataProductItemOtherProductTypeLoanInterestLoanInterestTierBandSetItemLoanInterestFeesChargesItemLoanInterestFeeChargeDetailItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Other fees/charges details
    """


    class MetaOapg:
        required = {
            "ApplicationFrequency",
            "FeeType",
            "CalculationFrequency",
        }
        
        class properties:
        
            @staticmethod
            def ApplicationFrequency() -> typing.Type['OBFeeFrequency1Code2']:
                return OBFeeFrequency1Code2
        
            @staticmethod
            def CalculationFrequency() -> typing.Type['OBFeeFrequency1Code3']:
                return OBFeeFrequency1Code3
        
            @staticmethod
            def FeeType() -> typing.Type['OBFeeType1Code']:
                return OBFeeType1Code
        
            @staticmethod
            def FeeAmount() -> typing.Type['OBAmount13']:
                return OBAmount13
        
            @staticmethod
            def FeeRate() -> typing.Type['OBRate11']:
                return OBRate11
        
            @staticmethod
            def FeeRateType() -> typing.Type['OBInterestRateType1Code1']:
                return OBInterestRateType1Code1
            NegotiableIndicator = schemas.BoolSchema
        
            @staticmethod
            def Notes() -> typing.Type['OBReadProduct2DataProductItemOtherProductTypeLoanInterestLoanInterestTierBandSetItemLoanInterestFeesChargesItemLoanInterestFeeChargeDetailItemNotes']:
                return OBReadProduct2DataProductItemOtherProductTypeLoanInterestLoanInterestTierBandSetItemLoanInterestFeesChargesItemLoanInterestFeeChargeDetailItemNotes
        
            @staticmethod
            def OtherApplicationFrequency() -> typing.Type['OBOtherCodeType16']:
                return OBOtherCodeType16
        
            @staticmethod
            def OtherCalculationFrequency() -> typing.Type['OBOtherCodeType17']:
                return OBOtherCodeType17
        
            @staticmethod
            def OtherFeeRateType() -> typing.Type['OBOtherCodeType15']:
                return OBOtherCodeType15
        
            @staticmethod
            def OtherFeeType() -> typing.Type['OBOtherFeeChargeDetailType']:
                return OBOtherFeeChargeDetailType
            __annotations__ = {
                "ApplicationFrequency": ApplicationFrequency,
                "CalculationFrequency": CalculationFrequency,
                "FeeType": FeeType,
                "FeeAmount": FeeAmount,
                "FeeRate": FeeRate,
                "FeeRateType": FeeRateType,
                "NegotiableIndicator": NegotiableIndicator,
                "Notes": Notes,
                "OtherApplicationFrequency": OtherApplicationFrequency,
                "OtherCalculationFrequency": OtherCalculationFrequency,
                "OtherFeeRateType": OtherFeeRateType,
                "OtherFeeType": OtherFeeType,
            }
    
    ApplicationFrequency: 'OBFeeFrequency1Code2'
    FeeType: 'OBFeeType1Code'
    CalculationFrequency: 'OBFeeFrequency1Code3'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ApplicationFrequency"]) -> 'OBFeeFrequency1Code2': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CalculationFrequency"]) -> 'OBFeeFrequency1Code3': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FeeType"]) -> 'OBFeeType1Code': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FeeAmount"]) -> 'OBAmount13': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FeeRate"]) -> 'OBRate11': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FeeRateType"]) -> 'OBInterestRateType1Code1': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["NegotiableIndicator"]) -> MetaOapg.properties.NegotiableIndicator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Notes"]) -> 'OBReadProduct2DataProductItemOtherProductTypeLoanInterestLoanInterestTierBandSetItemLoanInterestFeesChargesItemLoanInterestFeeChargeDetailItemNotes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OtherApplicationFrequency"]) -> 'OBOtherCodeType16': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OtherCalculationFrequency"]) -> 'OBOtherCodeType17': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OtherFeeRateType"]) -> 'OBOtherCodeType15': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OtherFeeType"]) -> 'OBOtherFeeChargeDetailType': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ApplicationFrequency", "CalculationFrequency", "FeeType", "FeeAmount", "FeeRate", "FeeRateType", "NegotiableIndicator", "Notes", "OtherApplicationFrequency", "OtherCalculationFrequency", "OtherFeeRateType", "OtherFeeType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ApplicationFrequency"]) -> 'OBFeeFrequency1Code2': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CalculationFrequency"]) -> 'OBFeeFrequency1Code3': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FeeType"]) -> 'OBFeeType1Code': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FeeAmount"]) -> typing.Union['OBAmount13', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FeeRate"]) -> typing.Union['OBRate11', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FeeRateType"]) -> typing.Union['OBInterestRateType1Code1', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["NegotiableIndicator"]) -> typing.Union[MetaOapg.properties.NegotiableIndicator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Notes"]) -> typing.Union['OBReadProduct2DataProductItemOtherProductTypeLoanInterestLoanInterestTierBandSetItemLoanInterestFeesChargesItemLoanInterestFeeChargeDetailItemNotes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OtherApplicationFrequency"]) -> typing.Union['OBOtherCodeType16', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OtherCalculationFrequency"]) -> typing.Union['OBOtherCodeType17', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OtherFeeRateType"]) -> typing.Union['OBOtherCodeType15', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OtherFeeType"]) -> typing.Union['OBOtherFeeChargeDetailType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ApplicationFrequency", "CalculationFrequency", "FeeType", "FeeAmount", "FeeRate", "FeeRateType", "NegotiableIndicator", "Notes", "OtherApplicationFrequency", "OtherCalculationFrequency", "OtherFeeRateType", "OtherFeeType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ApplicationFrequency: 'OBFeeFrequency1Code2',
        FeeType: 'OBFeeType1Code',
        CalculationFrequency: 'OBFeeFrequency1Code3',
        FeeAmount: typing.Union['OBAmount13', schemas.Unset] = schemas.unset,
        FeeRate: typing.Union['OBRate11', schemas.Unset] = schemas.unset,
        FeeRateType: typing.Union['OBInterestRateType1Code1', schemas.Unset] = schemas.unset,
        NegotiableIndicator: typing.Union[MetaOapg.properties.NegotiableIndicator, bool, schemas.Unset] = schemas.unset,
        Notes: typing.Union['OBReadProduct2DataProductItemOtherProductTypeLoanInterestLoanInterestTierBandSetItemLoanInterestFeesChargesItemLoanInterestFeeChargeDetailItemNotes', schemas.Unset] = schemas.unset,
        OtherApplicationFrequency: typing.Union['OBOtherCodeType16', schemas.Unset] = schemas.unset,
        OtherCalculationFrequency: typing.Union['OBOtherCodeType17', schemas.Unset] = schemas.unset,
        OtherFeeRateType: typing.Union['OBOtherCodeType15', schemas.Unset] = schemas.unset,
        OtherFeeType: typing.Union['OBOtherFeeChargeDetailType', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OBReadProduct2DataProductItemOtherProductTypeLoanInterestLoanInterestTierBandSetItemLoanInterestFeesChargesItemLoanInterestFeeChargeDetailItem':
        return super().__new__(
            cls,
            *args,
            ApplicationFrequency=ApplicationFrequency,
            FeeType=FeeType,
            CalculationFrequency=CalculationFrequency,
            FeeAmount=FeeAmount,
            FeeRate=FeeRate,
            FeeRateType=FeeRateType,
            NegotiableIndicator=NegotiableIndicator,
            Notes=Notes,
            OtherApplicationFrequency=OtherApplicationFrequency,
            OtherCalculationFrequency=OtherCalculationFrequency,
            OtherFeeRateType=OtherFeeRateType,
            OtherFeeType=OtherFeeType,
            _configuration=_configuration,
            **kwargs,
        )

from open_banking_account_and_transaction_python_sdk.model.ob_amount13 import OBAmount13
from open_banking_account_and_transaction_python_sdk.model.ob_fee_frequency1_code2 import OBFeeFrequency1Code2
from open_banking_account_and_transaction_python_sdk.model.ob_fee_frequency1_code3 import OBFeeFrequency1Code3
from open_banking_account_and_transaction_python_sdk.model.ob_fee_type1_code import OBFeeType1Code
from open_banking_account_and_transaction_python_sdk.model.ob_interest_rate_type1_code1 import OBInterestRateType1Code1
from open_banking_account_and_transaction_python_sdk.model.ob_other_code_type15 import OBOtherCodeType15
from open_banking_account_and_transaction_python_sdk.model.ob_other_code_type16 import OBOtherCodeType16
from open_banking_account_and_transaction_python_sdk.model.ob_other_code_type17 import OBOtherCodeType17
from open_banking_account_and_transaction_python_sdk.model.ob_other_fee_charge_detail_type import OBOtherFeeChargeDetailType
from open_banking_account_and_transaction_python_sdk.model.ob_rate11 import OBRate11
from open_banking_account_and_transaction_python_sdk.model.ob_read_product2_data_product_item_other_product_type_loan_interest_loan_interest_tier_band_set_item_loan_interest_fees_charges_item_loan_interest_fee_charge_detail_item_notes import OBReadProduct2DataProductItemOtherProductTypeLoanInterestLoanInterestTierBandSetItemLoanInterestFeesChargesItemLoanInterestFeeChargeDetailItemNotes
