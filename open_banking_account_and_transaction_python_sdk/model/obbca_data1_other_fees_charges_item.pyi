# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from open_banking_account_and_transaction_python_sdk import schemas  # noqa: F401


class OBBCAData1OtherFeesChargesItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Contains details of fees and charges which are not associated with either Overdraft or features/benefits
    """


    class MetaOapg:
        required = {
            "FeeChargeDetail",
        }
        
        class properties:
        
            @staticmethod
            def FeeChargeDetail() -> typing.Type['OBBCAData1OtherFeesChargesItemFeeChargeDetail']:
                return OBBCAData1OtherFeesChargesItemFeeChargeDetail
        
            @staticmethod
            def FeeChargeCap() -> typing.Type['OBBCAData1OtherFeesChargesItemFeeChargeCap']:
                return OBBCAData1OtherFeesChargesItemFeeChargeCap
        
            @staticmethod
            def OtherTariffType() -> typing.Type['OBBCAData1OtherFeesChargesItemOtherTariffType']:
                return OBBCAData1OtherFeesChargesItemOtherTariffType
            
            
            class TariffName(
                schemas.StrSchema
            ):
                pass
            
            
            class TariffType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ELECTRONIC(cls):
                    return cls("Electronic")
                
                @schemas.classproperty
                def MIXED(cls):
                    return cls("Mixed")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("Other")
            __annotations__ = {
                "FeeChargeDetail": FeeChargeDetail,
                "FeeChargeCap": FeeChargeCap,
                "OtherTariffType": OtherTariffType,
                "TariffName": TariffName,
                "TariffType": TariffType,
            }
    
    FeeChargeDetail: 'OBBCAData1OtherFeesChargesItemFeeChargeDetail'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FeeChargeDetail"]) -> 'OBBCAData1OtherFeesChargesItemFeeChargeDetail': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FeeChargeCap"]) -> 'OBBCAData1OtherFeesChargesItemFeeChargeCap': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OtherTariffType"]) -> 'OBBCAData1OtherFeesChargesItemOtherTariffType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TariffName"]) -> MetaOapg.properties.TariffName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TariffType"]) -> MetaOapg.properties.TariffType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["FeeChargeDetail", "FeeChargeCap", "OtherTariffType", "TariffName", "TariffType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FeeChargeDetail"]) -> 'OBBCAData1OtherFeesChargesItemFeeChargeDetail': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FeeChargeCap"]) -> typing.Union['OBBCAData1OtherFeesChargesItemFeeChargeCap', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OtherTariffType"]) -> typing.Union['OBBCAData1OtherFeesChargesItemOtherTariffType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TariffName"]) -> typing.Union[MetaOapg.properties.TariffName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TariffType"]) -> typing.Union[MetaOapg.properties.TariffType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["FeeChargeDetail", "FeeChargeCap", "OtherTariffType", "TariffName", "TariffType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        FeeChargeDetail: 'OBBCAData1OtherFeesChargesItemFeeChargeDetail',
        FeeChargeCap: typing.Union['OBBCAData1OtherFeesChargesItemFeeChargeCap', schemas.Unset] = schemas.unset,
        OtherTariffType: typing.Union['OBBCAData1OtherFeesChargesItemOtherTariffType', schemas.Unset] = schemas.unset,
        TariffName: typing.Union[MetaOapg.properties.TariffName, str, schemas.Unset] = schemas.unset,
        TariffType: typing.Union[MetaOapg.properties.TariffType, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OBBCAData1OtherFeesChargesItem':
        return super().__new__(
            cls,
            *args,
            FeeChargeDetail=FeeChargeDetail,
            FeeChargeCap=FeeChargeCap,
            OtherTariffType=OtherTariffType,
            TariffName=TariffName,
            TariffType=TariffType,
            _configuration=_configuration,
            **kwargs,
        )

from open_banking_account_and_transaction_python_sdk.model.obbca_data1_other_fees_charges_item_fee_charge_cap import OBBCAData1OtherFeesChargesItemFeeChargeCap
from open_banking_account_and_transaction_python_sdk.model.obbca_data1_other_fees_charges_item_fee_charge_detail import OBBCAData1OtherFeesChargesItemFeeChargeDetail
from open_banking_account_and_transaction_python_sdk.model.obbca_data1_other_fees_charges_item_other_tariff_type import OBBCAData1OtherFeesChargesItemOtherTariffType
