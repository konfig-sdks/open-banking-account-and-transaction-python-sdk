# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from open_banking_account_and_transaction_python_sdk import schemas  # noqa: F401


class OBPCAData1OtherFeesChargesFeeChargeDetailItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Other fees/charges details
    """


    class MetaOapg:
        required = {
            "ApplicationFrequency",
            "FeeType",
            "FeeCategory",
        }
        
        class properties:
            
            
            class ApplicationFrequency(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ACCOUNT_CLOSING(cls):
                    return cls("AccountClosing")
                
                @schemas.classproperty
                def ACCOUNT_OPENING(cls):
                    return cls("AccountOpening")
                
                @schemas.classproperty
                def ACADEMIC_TERM(cls):
                    return cls("AcademicTerm")
                
                @schemas.classproperty
                def CHARGING_PERIOD(cls):
                    return cls("ChargingPeriod")
                
                @schemas.classproperty
                def DAILY(cls):
                    return cls("Daily")
                
                @schemas.classproperty
                def PER_ITEM(cls):
                    return cls("PerItem")
                
                @schemas.classproperty
                def MONTHLY(cls):
                    return cls("Monthly")
                
                @schemas.classproperty
                def ON_ACCOUNT_ANNIVERSARY(cls):
                    return cls("OnAccountAnniversary")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("Other")
                
                @schemas.classproperty
                def PER_HOUR(cls):
                    return cls("PerHour")
                
                @schemas.classproperty
                def PER_OCCURRENCE(cls):
                    return cls("PerOccurrence")
                
                @schemas.classproperty
                def PER_SHEET(cls):
                    return cls("PerSheet")
                
                @schemas.classproperty
                def PER_TRANSACTION(cls):
                    return cls("PerTransaction")
                
                @schemas.classproperty
                def PER_TRANSACTION_AMOUNT(cls):
                    return cls("PerTransactionAmount")
                
                @schemas.classproperty
                def PER_TRANSACTION_PERCENTAGE(cls):
                    return cls("PerTransactionPercentage")
                
                @schemas.classproperty
                def QUARTERLY(cls):
                    return cls("Quarterly")
                
                @schemas.classproperty
                def SIX_MONTHLY(cls):
                    return cls("SixMonthly")
                
                @schemas.classproperty
                def STATEMENT_MONTHLY(cls):
                    return cls("StatementMonthly")
                
                @schemas.classproperty
                def WEEKLY(cls):
                    return cls("Weekly")
                
                @schemas.classproperty
                def YEARLY(cls):
                    return cls("Yearly")
            
            
            class FeeCategory(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("Other")
                
                @schemas.classproperty
                def SERVICING(cls):
                    return cls("Servicing")
            
            
            class FeeType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def SERVICE_CACCOUNT_FEE(cls):
                    return cls("ServiceCAccountFee")
                
                @schemas.classproperty
                def SERVICE_CACCOUNT_FEE_MONTHLY(cls):
                    return cls("ServiceCAccountFeeMonthly")
                
                @schemas.classproperty
                def SERVICE_COTHER(cls):
                    return cls("ServiceCOther")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("Other")
            
            
            class CalculationFrequency(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ACCOUNT_CLOSING(cls):
                    return cls("AccountClosing")
                
                @schemas.classproperty
                def ACCOUNT_OPENING(cls):
                    return cls("AccountOpening")
                
                @schemas.classproperty
                def ACADEMIC_TERM(cls):
                    return cls("AcademicTerm")
                
                @schemas.classproperty
                def CHARGING_PERIOD(cls):
                    return cls("ChargingPeriod")
                
                @schemas.classproperty
                def DAILY(cls):
                    return cls("Daily")
                
                @schemas.classproperty
                def PER_ITEM(cls):
                    return cls("PerItem")
                
                @schemas.classproperty
                def MONTHLY(cls):
                    return cls("Monthly")
                
                @schemas.classproperty
                def ON_ACCOUNT_ANNIVERSARY(cls):
                    return cls("OnAccountAnniversary")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("Other")
                
                @schemas.classproperty
                def PER_HOUR(cls):
                    return cls("PerHour")
                
                @schemas.classproperty
                def PER_OCCURRENCE(cls):
                    return cls("PerOccurrence")
                
                @schemas.classproperty
                def PER_SHEET(cls):
                    return cls("PerSheet")
                
                @schemas.classproperty
                def PER_TRANSACTION(cls):
                    return cls("PerTransaction")
                
                @schemas.classproperty
                def PER_TRANSACTION_AMOUNT(cls):
                    return cls("PerTransactionAmount")
                
                @schemas.classproperty
                def PER_TRANSACTION_PERCENTAGE(cls):
                    return cls("PerTransactionPercentage")
                
                @schemas.classproperty
                def QUARTERLY(cls):
                    return cls("Quarterly")
                
                @schemas.classproperty
                def SIX_MONTHLY(cls):
                    return cls("SixMonthly")
                
                @schemas.classproperty
                def STATEMENT_MONTHLY(cls):
                    return cls("StatementMonthly")
                
                @schemas.classproperty
                def WEEKLY(cls):
                    return cls("Weekly")
                
                @schemas.classproperty
                def YEARLY(cls):
                    return cls("Yearly")
            
            
            class FeeAmount(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def FeeApplicableRange() -> typing.Type['OBPCAData1OtherFeesChargesFeeChargeDetailItemFeeApplicableRange']:
                return OBPCAData1OtherFeesChargesFeeChargeDetailItemFeeApplicableRange
        
            @staticmethod
            def FeeChargeCap() -> typing.Type['OBPCAData1OtherFeesChargesFeeChargeDetailItemFeeChargeCap']:
                return OBPCAData1OtherFeesChargesFeeChargeDetailItemFeeChargeCap
            
            
            class FeeRate(
                schemas.StrSchema
            ):
                pass
            
            
            class FeeRateType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def LINKED_BASE_RATE(cls):
                    return cls("LinkedBaseRate")
                
                @schemas.classproperty
                def GROSS(cls):
                    return cls("Gross")
                
                @schemas.classproperty
                def NET(cls):
                    return cls("Net")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("Other")
        
            @staticmethod
            def Notes() -> typing.Type['OBPCAData1OtherFeesChargesFeeChargeDetailItemNotes']:
                return OBPCAData1OtherFeesChargesFeeChargeDetailItemNotes
        
            @staticmethod
            def OtherApplicationFrequency() -> typing.Type['OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherApplicationFrequency']:
                return OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherApplicationFrequency
        
            @staticmethod
            def OtherCalculationFrequency() -> typing.Type['OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherCalculationFrequency']:
                return OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherCalculationFrequency
        
            @staticmethod
            def OtherFeeCategoryType() -> typing.Type['OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeCategoryType']:
                return OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeCategoryType
        
            @staticmethod
            def OtherFeeRateType() -> typing.Type['OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeRateType']:
                return OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeRateType
        
            @staticmethod
            def OtherFeeType() -> typing.Type['OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeType']:
                return OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeType
            __annotations__ = {
                "ApplicationFrequency": ApplicationFrequency,
                "FeeCategory": FeeCategory,
                "FeeType": FeeType,
                "CalculationFrequency": CalculationFrequency,
                "FeeAmount": FeeAmount,
                "FeeApplicableRange": FeeApplicableRange,
                "FeeChargeCap": FeeChargeCap,
                "FeeRate": FeeRate,
                "FeeRateType": FeeRateType,
                "Notes": Notes,
                "OtherApplicationFrequency": OtherApplicationFrequency,
                "OtherCalculationFrequency": OtherCalculationFrequency,
                "OtherFeeCategoryType": OtherFeeCategoryType,
                "OtherFeeRateType": OtherFeeRateType,
                "OtherFeeType": OtherFeeType,
            }
    
    ApplicationFrequency: MetaOapg.properties.ApplicationFrequency
    FeeType: MetaOapg.properties.FeeType
    FeeCategory: MetaOapg.properties.FeeCategory
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ApplicationFrequency"]) -> MetaOapg.properties.ApplicationFrequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FeeCategory"]) -> MetaOapg.properties.FeeCategory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FeeType"]) -> MetaOapg.properties.FeeType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CalculationFrequency"]) -> MetaOapg.properties.CalculationFrequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FeeAmount"]) -> MetaOapg.properties.FeeAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FeeApplicableRange"]) -> 'OBPCAData1OtherFeesChargesFeeChargeDetailItemFeeApplicableRange': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FeeChargeCap"]) -> 'OBPCAData1OtherFeesChargesFeeChargeDetailItemFeeChargeCap': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FeeRate"]) -> MetaOapg.properties.FeeRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FeeRateType"]) -> MetaOapg.properties.FeeRateType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Notes"]) -> 'OBPCAData1OtherFeesChargesFeeChargeDetailItemNotes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OtherApplicationFrequency"]) -> 'OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherApplicationFrequency': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OtherCalculationFrequency"]) -> 'OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherCalculationFrequency': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OtherFeeCategoryType"]) -> 'OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeCategoryType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OtherFeeRateType"]) -> 'OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeRateType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OtherFeeType"]) -> 'OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeType': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ApplicationFrequency", "FeeCategory", "FeeType", "CalculationFrequency", "FeeAmount", "FeeApplicableRange", "FeeChargeCap", "FeeRate", "FeeRateType", "Notes", "OtherApplicationFrequency", "OtherCalculationFrequency", "OtherFeeCategoryType", "OtherFeeRateType", "OtherFeeType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ApplicationFrequency"]) -> MetaOapg.properties.ApplicationFrequency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FeeCategory"]) -> MetaOapg.properties.FeeCategory: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FeeType"]) -> MetaOapg.properties.FeeType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CalculationFrequency"]) -> typing.Union[MetaOapg.properties.CalculationFrequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FeeAmount"]) -> typing.Union[MetaOapg.properties.FeeAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FeeApplicableRange"]) -> typing.Union['OBPCAData1OtherFeesChargesFeeChargeDetailItemFeeApplicableRange', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FeeChargeCap"]) -> typing.Union['OBPCAData1OtherFeesChargesFeeChargeDetailItemFeeChargeCap', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FeeRate"]) -> typing.Union[MetaOapg.properties.FeeRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FeeRateType"]) -> typing.Union[MetaOapg.properties.FeeRateType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Notes"]) -> typing.Union['OBPCAData1OtherFeesChargesFeeChargeDetailItemNotes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OtherApplicationFrequency"]) -> typing.Union['OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherApplicationFrequency', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OtherCalculationFrequency"]) -> typing.Union['OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherCalculationFrequency', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OtherFeeCategoryType"]) -> typing.Union['OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeCategoryType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OtherFeeRateType"]) -> typing.Union['OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeRateType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OtherFeeType"]) -> typing.Union['OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ApplicationFrequency", "FeeCategory", "FeeType", "CalculationFrequency", "FeeAmount", "FeeApplicableRange", "FeeChargeCap", "FeeRate", "FeeRateType", "Notes", "OtherApplicationFrequency", "OtherCalculationFrequency", "OtherFeeCategoryType", "OtherFeeRateType", "OtherFeeType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ApplicationFrequency: typing.Union[MetaOapg.properties.ApplicationFrequency, str, ],
        FeeType: typing.Union[MetaOapg.properties.FeeType, str, ],
        FeeCategory: typing.Union[MetaOapg.properties.FeeCategory, str, ],
        CalculationFrequency: typing.Union[MetaOapg.properties.CalculationFrequency, str, schemas.Unset] = schemas.unset,
        FeeAmount: typing.Union[MetaOapg.properties.FeeAmount, str, schemas.Unset] = schemas.unset,
        FeeApplicableRange: typing.Union['OBPCAData1OtherFeesChargesFeeChargeDetailItemFeeApplicableRange', schemas.Unset] = schemas.unset,
        FeeChargeCap: typing.Union['OBPCAData1OtherFeesChargesFeeChargeDetailItemFeeChargeCap', schemas.Unset] = schemas.unset,
        FeeRate: typing.Union[MetaOapg.properties.FeeRate, str, schemas.Unset] = schemas.unset,
        FeeRateType: typing.Union[MetaOapg.properties.FeeRateType, str, schemas.Unset] = schemas.unset,
        Notes: typing.Union['OBPCAData1OtherFeesChargesFeeChargeDetailItemNotes', schemas.Unset] = schemas.unset,
        OtherApplicationFrequency: typing.Union['OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherApplicationFrequency', schemas.Unset] = schemas.unset,
        OtherCalculationFrequency: typing.Union['OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherCalculationFrequency', schemas.Unset] = schemas.unset,
        OtherFeeCategoryType: typing.Union['OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeCategoryType', schemas.Unset] = schemas.unset,
        OtherFeeRateType: typing.Union['OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeRateType', schemas.Unset] = schemas.unset,
        OtherFeeType: typing.Union['OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeType', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OBPCAData1OtherFeesChargesFeeChargeDetailItem':
        return super().__new__(
            cls,
            *args,
            ApplicationFrequency=ApplicationFrequency,
            FeeType=FeeType,
            FeeCategory=FeeCategory,
            CalculationFrequency=CalculationFrequency,
            FeeAmount=FeeAmount,
            FeeApplicableRange=FeeApplicableRange,
            FeeChargeCap=FeeChargeCap,
            FeeRate=FeeRate,
            FeeRateType=FeeRateType,
            Notes=Notes,
            OtherApplicationFrequency=OtherApplicationFrequency,
            OtherCalculationFrequency=OtherCalculationFrequency,
            OtherFeeCategoryType=OtherFeeCategoryType,
            OtherFeeRateType=OtherFeeRateType,
            OtherFeeType=OtherFeeType,
            _configuration=_configuration,
            **kwargs,
        )

from open_banking_account_and_transaction_python_sdk.model.obpca_data1_other_fees_charges_fee_charge_detail_item_fee_applicable_range import OBPCAData1OtherFeesChargesFeeChargeDetailItemFeeApplicableRange
from open_banking_account_and_transaction_python_sdk.model.obpca_data1_other_fees_charges_fee_charge_detail_item_fee_charge_cap import OBPCAData1OtherFeesChargesFeeChargeDetailItemFeeChargeCap
from open_banking_account_and_transaction_python_sdk.model.obpca_data1_other_fees_charges_fee_charge_detail_item_notes import OBPCAData1OtherFeesChargesFeeChargeDetailItemNotes
from open_banking_account_and_transaction_python_sdk.model.obpca_data1_other_fees_charges_fee_charge_detail_item_other_application_frequency import OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherApplicationFrequency
from open_banking_account_and_transaction_python_sdk.model.obpca_data1_other_fees_charges_fee_charge_detail_item_other_calculation_frequency import OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherCalculationFrequency
from open_banking_account_and_transaction_python_sdk.model.obpca_data1_other_fees_charges_fee_charge_detail_item_other_fee_category_type import OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeCategoryType
from open_banking_account_and_transaction_python_sdk.model.obpca_data1_other_fees_charges_fee_charge_detail_item_other_fee_rate_type import OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeRateType
from open_banking_account_and_transaction_python_sdk.model.obpca_data1_other_fees_charges_fee_charge_detail_item_other_fee_type import OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeType
