# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from open_banking_account_and_transaction_python_sdk import schemas  # noqa: F401


class OBTransactionCashBalance(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Set of elements used to define the balance as a numerical representation of the net increases and decreases in an account after a transaction entry is applied to the account.
    """


    class MetaOapg:
        required = {
            "Type",
            "Amount",
            "CreditDebitIndicator",
        }
        
        class properties:
        
            @staticmethod
            def Amount() -> typing.Type['OBTransactionCashBalanceAmount']:
                return OBTransactionCashBalanceAmount
        
            @staticmethod
            def CreditDebitIndicator() -> typing.Type['OBCreditDebitCode2']:
                return OBCreditDebitCode2
        
            @staticmethod
            def Type() -> typing.Type['OBBalanceType1Code']:
                return OBBalanceType1Code
            __annotations__ = {
                "Amount": Amount,
                "CreditDebitIndicator": CreditDebitIndicator,
                "Type": Type,
            }
    
    Type: 'OBBalanceType1Code'
    Amount: 'OBTransactionCashBalanceAmount'
    CreditDebitIndicator: 'OBCreditDebitCode2'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Amount"]) -> 'OBTransactionCashBalanceAmount': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CreditDebitIndicator"]) -> 'OBCreditDebitCode2': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Type"]) -> 'OBBalanceType1Code': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Amount", "CreditDebitIndicator", "Type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Amount"]) -> 'OBTransactionCashBalanceAmount': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CreditDebitIndicator"]) -> 'OBCreditDebitCode2': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Type"]) -> 'OBBalanceType1Code': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Amount", "CreditDebitIndicator", "Type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        Type: 'OBBalanceType1Code',
        Amount: 'OBTransactionCashBalanceAmount',
        CreditDebitIndicator: 'OBCreditDebitCode2',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OBTransactionCashBalance':
        return super().__new__(
            cls,
            *args,
            Type=Type,
            Amount=Amount,
            CreditDebitIndicator=CreditDebitIndicator,
            _configuration=_configuration,
            **kwargs,
        )

from open_banking_account_and_transaction_python_sdk.model.ob_balance_type1_code import OBBalanceType1Code
from open_banking_account_and_transaction_python_sdk.model.ob_credit_debit_code2 import OBCreditDebitCode2
from open_banking_account_and_transaction_python_sdk.model.ob_transaction_cash_balance_amount import OBTransactionCashBalanceAmount
