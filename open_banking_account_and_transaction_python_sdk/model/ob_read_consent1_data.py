# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from open_banking_account_and_transaction_python_sdk import schemas  # noqa: F401


class OBReadConsent1Data(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "Permissions",
        }
        
        class properties:
        
            @staticmethod
            def Permissions() -> typing.Type['OBReadConsent1DataPermissions']:
                return OBReadConsent1DataPermissions
            ExpirationDateTime = schemas.DateTimeSchema
            TransactionFromDateTime = schemas.DateTimeSchema
            TransactionToDateTime = schemas.DateTimeSchema
            __annotations__ = {
                "Permissions": Permissions,
                "ExpirationDateTime": ExpirationDateTime,
                "TransactionFromDateTime": TransactionFromDateTime,
                "TransactionToDateTime": TransactionToDateTime,
            }
    
    Permissions: 'OBReadConsent1DataPermissions'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Permissions"]) -> 'OBReadConsent1DataPermissions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ExpirationDateTime"]) -> MetaOapg.properties.ExpirationDateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TransactionFromDateTime"]) -> MetaOapg.properties.TransactionFromDateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TransactionToDateTime"]) -> MetaOapg.properties.TransactionToDateTime: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Permissions", "ExpirationDateTime", "TransactionFromDateTime", "TransactionToDateTime", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Permissions"]) -> 'OBReadConsent1DataPermissions': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ExpirationDateTime"]) -> typing.Union[MetaOapg.properties.ExpirationDateTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TransactionFromDateTime"]) -> typing.Union[MetaOapg.properties.TransactionFromDateTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TransactionToDateTime"]) -> typing.Union[MetaOapg.properties.TransactionToDateTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Permissions", "ExpirationDateTime", "TransactionFromDateTime", "TransactionToDateTime", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        Permissions: 'OBReadConsent1DataPermissions',
        ExpirationDateTime: typing.Union[MetaOapg.properties.ExpirationDateTime, str, datetime, schemas.Unset] = schemas.unset,
        TransactionFromDateTime: typing.Union[MetaOapg.properties.TransactionFromDateTime, str, datetime, schemas.Unset] = schemas.unset,
        TransactionToDateTime: typing.Union[MetaOapg.properties.TransactionToDateTime, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OBReadConsent1Data':
        return super().__new__(
            cls,
            *args,
            Permissions=Permissions,
            ExpirationDateTime=ExpirationDateTime,
            TransactionFromDateTime=TransactionFromDateTime,
            TransactionToDateTime=TransactionToDateTime,
            _configuration=_configuration,
            **kwargs,
        )

from open_banking_account_and_transaction_python_sdk.model.ob_read_consent1_data_permissions import OBReadConsent1DataPermissions
