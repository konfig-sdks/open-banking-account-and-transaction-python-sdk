# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from open_banking_account_and_transaction_python_sdk import schemas  # noqa: F401


class OBReadOffer1DataOfferItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "AccountId",
        }
        
        class properties:
        
            @staticmethod
            def AccountId() -> typing.Type['AccountId']:
                return AccountId
        
            @staticmethod
            def Amount() -> typing.Type['OBReadOffer1DataOfferItemAmount']:
                return OBReadOffer1DataOfferItemAmount
            
            
            class Description(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 500
                    min_length = 1
            EndDateTime = schemas.DateTimeSchema
        
            @staticmethod
            def Fee() -> typing.Type['OBReadOffer1DataOfferItemFee']:
                return OBReadOffer1DataOfferItemFee
            
            
            class OfferId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 40
                    min_length = 1
            
            
            class OfferType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "BalanceTransfer": "BALANCE_TRANSFER",
                        "LimitIncrease": "LIMIT_INCREASE",
                        "MoneyTransfer": "MONEY_TRANSFER",
                        "Other": "OTHER",
                        "PromotionalRate": "PROMOTIONAL_RATE",
                    }
                
                @schemas.classproperty
                def BALANCE_TRANSFER(cls):
                    return cls("BalanceTransfer")
                
                @schemas.classproperty
                def LIMIT_INCREASE(cls):
                    return cls("LimitIncrease")
                
                @schemas.classproperty
                def MONEY_TRANSFER(cls):
                    return cls("MoneyTransfer")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("Other")
                
                @schemas.classproperty
                def PROMOTIONAL_RATE(cls):
                    return cls("PromotionalRate")
            
            
            class Rate(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$',
                    }]
            StartDateTime = schemas.DateTimeSchema
            
            
            class Term(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 500
                    min_length = 1
            
            
            class URL(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 256
                    min_length = 1
            Value = schemas.IntSchema
            __annotations__ = {
                "AccountId": AccountId,
                "Amount": Amount,
                "Description": Description,
                "EndDateTime": EndDateTime,
                "Fee": Fee,
                "OfferId": OfferId,
                "OfferType": OfferType,
                "Rate": Rate,
                "StartDateTime": StartDateTime,
                "Term": Term,
                "URL": URL,
                "Value": Value,
            }
    
    AccountId: 'AccountId'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AccountId"]) -> 'AccountId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Amount"]) -> 'OBReadOffer1DataOfferItemAmount': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Description"]) -> MetaOapg.properties.Description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EndDateTime"]) -> MetaOapg.properties.EndDateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Fee"]) -> 'OBReadOffer1DataOfferItemFee': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OfferId"]) -> MetaOapg.properties.OfferId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OfferType"]) -> MetaOapg.properties.OfferType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Rate"]) -> MetaOapg.properties.Rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["StartDateTime"]) -> MetaOapg.properties.StartDateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Term"]) -> MetaOapg.properties.Term: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["URL"]) -> MetaOapg.properties.URL: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Value"]) -> MetaOapg.properties.Value: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["AccountId", "Amount", "Description", "EndDateTime", "Fee", "OfferId", "OfferType", "Rate", "StartDateTime", "Term", "URL", "Value", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AccountId"]) -> 'AccountId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Amount"]) -> typing.Union['OBReadOffer1DataOfferItemAmount', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Description"]) -> typing.Union[MetaOapg.properties.Description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EndDateTime"]) -> typing.Union[MetaOapg.properties.EndDateTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Fee"]) -> typing.Union['OBReadOffer1DataOfferItemFee', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OfferId"]) -> typing.Union[MetaOapg.properties.OfferId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OfferType"]) -> typing.Union[MetaOapg.properties.OfferType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Rate"]) -> typing.Union[MetaOapg.properties.Rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["StartDateTime"]) -> typing.Union[MetaOapg.properties.StartDateTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Term"]) -> typing.Union[MetaOapg.properties.Term, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["URL"]) -> typing.Union[MetaOapg.properties.URL, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Value"]) -> typing.Union[MetaOapg.properties.Value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["AccountId", "Amount", "Description", "EndDateTime", "Fee", "OfferId", "OfferType", "Rate", "StartDateTime", "Term", "URL", "Value", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        AccountId: 'AccountId',
        Amount: typing.Union['OBReadOffer1DataOfferItemAmount', schemas.Unset] = schemas.unset,
        Description: typing.Union[MetaOapg.properties.Description, str, schemas.Unset] = schemas.unset,
        EndDateTime: typing.Union[MetaOapg.properties.EndDateTime, str, datetime, schemas.Unset] = schemas.unset,
        Fee: typing.Union['OBReadOffer1DataOfferItemFee', schemas.Unset] = schemas.unset,
        OfferId: typing.Union[MetaOapg.properties.OfferId, str, schemas.Unset] = schemas.unset,
        OfferType: typing.Union[MetaOapg.properties.OfferType, str, schemas.Unset] = schemas.unset,
        Rate: typing.Union[MetaOapg.properties.Rate, str, schemas.Unset] = schemas.unset,
        StartDateTime: typing.Union[MetaOapg.properties.StartDateTime, str, datetime, schemas.Unset] = schemas.unset,
        Term: typing.Union[MetaOapg.properties.Term, str, schemas.Unset] = schemas.unset,
        URL: typing.Union[MetaOapg.properties.URL, str, schemas.Unset] = schemas.unset,
        Value: typing.Union[MetaOapg.properties.Value, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OBReadOffer1DataOfferItem':
        return super().__new__(
            cls,
            *args,
            AccountId=AccountId,
            Amount=Amount,
            Description=Description,
            EndDateTime=EndDateTime,
            Fee=Fee,
            OfferId=OfferId,
            OfferType=OfferType,
            Rate=Rate,
            StartDateTime=StartDateTime,
            Term=Term,
            URL=URL,
            Value=Value,
            _configuration=_configuration,
            **kwargs,
        )

from open_banking_account_and_transaction_python_sdk.model.account_id import AccountId
from open_banking_account_and_transaction_python_sdk.model.ob_read_offer1_data_offer_item_amount import OBReadOffer1DataOfferItemAmount
from open_banking_account_and_transaction_python_sdk.model.ob_read_offer1_data_offer_item_fee import OBReadOffer1DataOfferItemFee
