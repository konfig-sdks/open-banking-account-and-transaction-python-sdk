# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from open_banking_account_and_transaction_python_sdk import schemas  # noqa: F401


class OBTransaction6(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Provides further details on an entry in the report.
    """


    class MetaOapg:
        required = {
            "Status",
            "BookingDateTime",
            "AccountId",
            "Amount",
            "CreditDebitIndicator",
        }
        
        class properties:
        
            @staticmethod
            def AccountId() -> typing.Type['AccountId']:
                return AccountId
        
            @staticmethod
            def Amount() -> typing.Type['OBActiveOrHistoricCurrencyAndAmount9']:
                return OBActiveOrHistoricCurrencyAndAmount9
            BookingDateTime = schemas.DateTimeSchema
        
            @staticmethod
            def CreditDebitIndicator() -> typing.Type['OBCreditDebitCode1']:
                return OBCreditDebitCode1
        
            @staticmethod
            def Status() -> typing.Type['OBEntryStatus1Code']:
                return OBEntryStatus1Code
        
            @staticmethod
            def AddressLine() -> typing.Type['AddressLine']:
                return AddressLine
        
            @staticmethod
            def Balance() -> typing.Type['OBTransactionCashBalance']:
                return OBTransactionCashBalance
        
            @staticmethod
            def BankTransactionCode() -> typing.Type['OBBankTransactionCodeStructure1']:
                return OBBankTransactionCodeStructure1
        
            @staticmethod
            def CardInstrument() -> typing.Type['OBTransactionCardInstrument1']:
                return OBTransactionCardInstrument1
        
            @staticmethod
            def ChargeAmount() -> typing.Type['OBActiveOrHistoricCurrencyAndAmount10']:
                return OBActiveOrHistoricCurrencyAndAmount10
        
            @staticmethod
            def CreditorAccount() -> typing.Type['OBCashAccount60']:
                return OBCashAccount60
        
            @staticmethod
            def CreditorAgent() -> typing.Type['OBBranchAndFinancialInstitutionIdentification61']:
                return OBBranchAndFinancialInstitutionIdentification61
        
            @staticmethod
            def CurrencyExchange() -> typing.Type['OBCurrencyExchange5']:
                return OBCurrencyExchange5
        
            @staticmethod
            def DebtorAccount() -> typing.Type['OBCashAccount61']:
                return OBCashAccount61
        
            @staticmethod
            def DebtorAgent() -> typing.Type['OBBranchAndFinancialInstitutionIdentification62']:
                return OBBranchAndFinancialInstitutionIdentification62
        
            @staticmethod
            def MerchantDetails() -> typing.Type['OBMerchantDetails1']:
                return OBMerchantDetails1
        
            @staticmethod
            def ProprietaryBankTransactionCode() -> typing.Type['ProprietaryBankTransactionCodeStructure1']:
                return ProprietaryBankTransactionCodeStructure1
            
            
            class StatementReference(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['StatementReference']:
                        return StatementReference
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['StatementReference'], typing.List['StatementReference']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'StatementReference':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'StatementReference':
                    return super().__getitem__(i)
        
            @staticmethod
            def SupplementaryData() -> typing.Type['OBSupplementaryData1']:
                return OBSupplementaryData1
        
            @staticmethod
            def TransactionId() -> typing.Type['TransactionId']:
                return TransactionId
        
            @staticmethod
            def TransactionInformation() -> typing.Type['TransactionInformation']:
                return TransactionInformation
        
            @staticmethod
            def TransactionMutability() -> typing.Type['OBTransactionMutability1Code']:
                return OBTransactionMutability1Code
        
            @staticmethod
            def TransactionReference() -> typing.Type['TransactionReference']:
                return TransactionReference
            ValueDateTime = schemas.DateTimeSchema
            __annotations__ = {
                "AccountId": AccountId,
                "Amount": Amount,
                "BookingDateTime": BookingDateTime,
                "CreditDebitIndicator": CreditDebitIndicator,
                "Status": Status,
                "AddressLine": AddressLine,
                "Balance": Balance,
                "BankTransactionCode": BankTransactionCode,
                "CardInstrument": CardInstrument,
                "ChargeAmount": ChargeAmount,
                "CreditorAccount": CreditorAccount,
                "CreditorAgent": CreditorAgent,
                "CurrencyExchange": CurrencyExchange,
                "DebtorAccount": DebtorAccount,
                "DebtorAgent": DebtorAgent,
                "MerchantDetails": MerchantDetails,
                "ProprietaryBankTransactionCode": ProprietaryBankTransactionCode,
                "StatementReference": StatementReference,
                "SupplementaryData": SupplementaryData,
                "TransactionId": TransactionId,
                "TransactionInformation": TransactionInformation,
                "TransactionMutability": TransactionMutability,
                "TransactionReference": TransactionReference,
                "ValueDateTime": ValueDateTime,
            }
    
    Status: 'OBEntryStatus1Code'
    BookingDateTime: MetaOapg.properties.BookingDateTime
    AccountId: 'AccountId'
    Amount: 'OBActiveOrHistoricCurrencyAndAmount9'
    CreditDebitIndicator: 'OBCreditDebitCode1'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AccountId"]) -> 'AccountId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Amount"]) -> 'OBActiveOrHistoricCurrencyAndAmount9': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BookingDateTime"]) -> MetaOapg.properties.BookingDateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CreditDebitIndicator"]) -> 'OBCreditDebitCode1': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Status"]) -> 'OBEntryStatus1Code': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AddressLine"]) -> 'AddressLine': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Balance"]) -> 'OBTransactionCashBalance': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BankTransactionCode"]) -> 'OBBankTransactionCodeStructure1': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CardInstrument"]) -> 'OBTransactionCardInstrument1': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ChargeAmount"]) -> 'OBActiveOrHistoricCurrencyAndAmount10': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CreditorAccount"]) -> 'OBCashAccount60': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CreditorAgent"]) -> 'OBBranchAndFinancialInstitutionIdentification61': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CurrencyExchange"]) -> 'OBCurrencyExchange5': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DebtorAccount"]) -> 'OBCashAccount61': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DebtorAgent"]) -> 'OBBranchAndFinancialInstitutionIdentification62': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MerchantDetails"]) -> 'OBMerchantDetails1': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ProprietaryBankTransactionCode"]) -> 'ProprietaryBankTransactionCodeStructure1': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["StatementReference"]) -> MetaOapg.properties.StatementReference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SupplementaryData"]) -> 'OBSupplementaryData1': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TransactionId"]) -> 'TransactionId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TransactionInformation"]) -> 'TransactionInformation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TransactionMutability"]) -> 'OBTransactionMutability1Code': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TransactionReference"]) -> 'TransactionReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ValueDateTime"]) -> MetaOapg.properties.ValueDateTime: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["AccountId", "Amount", "BookingDateTime", "CreditDebitIndicator", "Status", "AddressLine", "Balance", "BankTransactionCode", "CardInstrument", "ChargeAmount", "CreditorAccount", "CreditorAgent", "CurrencyExchange", "DebtorAccount", "DebtorAgent", "MerchantDetails", "ProprietaryBankTransactionCode", "StatementReference", "SupplementaryData", "TransactionId", "TransactionInformation", "TransactionMutability", "TransactionReference", "ValueDateTime", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AccountId"]) -> 'AccountId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Amount"]) -> 'OBActiveOrHistoricCurrencyAndAmount9': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BookingDateTime"]) -> MetaOapg.properties.BookingDateTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CreditDebitIndicator"]) -> 'OBCreditDebitCode1': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Status"]) -> 'OBEntryStatus1Code': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AddressLine"]) -> typing.Union['AddressLine', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Balance"]) -> typing.Union['OBTransactionCashBalance', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BankTransactionCode"]) -> typing.Union['OBBankTransactionCodeStructure1', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CardInstrument"]) -> typing.Union['OBTransactionCardInstrument1', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ChargeAmount"]) -> typing.Union['OBActiveOrHistoricCurrencyAndAmount10', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CreditorAccount"]) -> typing.Union['OBCashAccount60', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CreditorAgent"]) -> typing.Union['OBBranchAndFinancialInstitutionIdentification61', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CurrencyExchange"]) -> typing.Union['OBCurrencyExchange5', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DebtorAccount"]) -> typing.Union['OBCashAccount61', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DebtorAgent"]) -> typing.Union['OBBranchAndFinancialInstitutionIdentification62', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MerchantDetails"]) -> typing.Union['OBMerchantDetails1', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ProprietaryBankTransactionCode"]) -> typing.Union['ProprietaryBankTransactionCodeStructure1', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["StatementReference"]) -> typing.Union[MetaOapg.properties.StatementReference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SupplementaryData"]) -> typing.Union['OBSupplementaryData1', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TransactionId"]) -> typing.Union['TransactionId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TransactionInformation"]) -> typing.Union['TransactionInformation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TransactionMutability"]) -> typing.Union['OBTransactionMutability1Code', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TransactionReference"]) -> typing.Union['TransactionReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ValueDateTime"]) -> typing.Union[MetaOapg.properties.ValueDateTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["AccountId", "Amount", "BookingDateTime", "CreditDebitIndicator", "Status", "AddressLine", "Balance", "BankTransactionCode", "CardInstrument", "ChargeAmount", "CreditorAccount", "CreditorAgent", "CurrencyExchange", "DebtorAccount", "DebtorAgent", "MerchantDetails", "ProprietaryBankTransactionCode", "StatementReference", "SupplementaryData", "TransactionId", "TransactionInformation", "TransactionMutability", "TransactionReference", "ValueDateTime", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        Status: 'OBEntryStatus1Code',
        BookingDateTime: typing.Union[MetaOapg.properties.BookingDateTime, str, datetime, ],
        AccountId: 'AccountId',
        Amount: 'OBActiveOrHistoricCurrencyAndAmount9',
        CreditDebitIndicator: 'OBCreditDebitCode1',
        AddressLine: typing.Union['AddressLine', schemas.Unset] = schemas.unset,
        Balance: typing.Union['OBTransactionCashBalance', schemas.Unset] = schemas.unset,
        BankTransactionCode: typing.Union['OBBankTransactionCodeStructure1', schemas.Unset] = schemas.unset,
        CardInstrument: typing.Union['OBTransactionCardInstrument1', schemas.Unset] = schemas.unset,
        ChargeAmount: typing.Union['OBActiveOrHistoricCurrencyAndAmount10', schemas.Unset] = schemas.unset,
        CreditorAccount: typing.Union['OBCashAccount60', schemas.Unset] = schemas.unset,
        CreditorAgent: typing.Union['OBBranchAndFinancialInstitutionIdentification61', schemas.Unset] = schemas.unset,
        CurrencyExchange: typing.Union['OBCurrencyExchange5', schemas.Unset] = schemas.unset,
        DebtorAccount: typing.Union['OBCashAccount61', schemas.Unset] = schemas.unset,
        DebtorAgent: typing.Union['OBBranchAndFinancialInstitutionIdentification62', schemas.Unset] = schemas.unset,
        MerchantDetails: typing.Union['OBMerchantDetails1', schemas.Unset] = schemas.unset,
        ProprietaryBankTransactionCode: typing.Union['ProprietaryBankTransactionCodeStructure1', schemas.Unset] = schemas.unset,
        StatementReference: typing.Union[MetaOapg.properties.StatementReference, list, tuple, schemas.Unset] = schemas.unset,
        SupplementaryData: typing.Union['OBSupplementaryData1', schemas.Unset] = schemas.unset,
        TransactionId: typing.Union['TransactionId', schemas.Unset] = schemas.unset,
        TransactionInformation: typing.Union['TransactionInformation', schemas.Unset] = schemas.unset,
        TransactionMutability: typing.Union['OBTransactionMutability1Code', schemas.Unset] = schemas.unset,
        TransactionReference: typing.Union['TransactionReference', schemas.Unset] = schemas.unset,
        ValueDateTime: typing.Union[MetaOapg.properties.ValueDateTime, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OBTransaction6':
        return super().__new__(
            cls,
            *args,
            Status=Status,
            BookingDateTime=BookingDateTime,
            AccountId=AccountId,
            Amount=Amount,
            CreditDebitIndicator=CreditDebitIndicator,
            AddressLine=AddressLine,
            Balance=Balance,
            BankTransactionCode=BankTransactionCode,
            CardInstrument=CardInstrument,
            ChargeAmount=ChargeAmount,
            CreditorAccount=CreditorAccount,
            CreditorAgent=CreditorAgent,
            CurrencyExchange=CurrencyExchange,
            DebtorAccount=DebtorAccount,
            DebtorAgent=DebtorAgent,
            MerchantDetails=MerchantDetails,
            ProprietaryBankTransactionCode=ProprietaryBankTransactionCode,
            StatementReference=StatementReference,
            SupplementaryData=SupplementaryData,
            TransactionId=TransactionId,
            TransactionInformation=TransactionInformation,
            TransactionMutability=TransactionMutability,
            TransactionReference=TransactionReference,
            ValueDateTime=ValueDateTime,
            _configuration=_configuration,
            **kwargs,
        )

from open_banking_account_and_transaction_python_sdk.model.account_id import AccountId
from open_banking_account_and_transaction_python_sdk.model.address_line import AddressLine
from open_banking_account_and_transaction_python_sdk.model.ob_active_or_historic_currency_and_amount10 import OBActiveOrHistoricCurrencyAndAmount10
from open_banking_account_and_transaction_python_sdk.model.ob_active_or_historic_currency_and_amount9 import OBActiveOrHistoricCurrencyAndAmount9
from open_banking_account_and_transaction_python_sdk.model.ob_bank_transaction_code_structure1 import OBBankTransactionCodeStructure1
from open_banking_account_and_transaction_python_sdk.model.ob_branch_and_financial_institution_identification61 import OBBranchAndFinancialInstitutionIdentification61
from open_banking_account_and_transaction_python_sdk.model.ob_branch_and_financial_institution_identification62 import OBBranchAndFinancialInstitutionIdentification62
from open_banking_account_and_transaction_python_sdk.model.ob_cash_account60 import OBCashAccount60
from open_banking_account_and_transaction_python_sdk.model.ob_cash_account61 import OBCashAccount61
from open_banking_account_and_transaction_python_sdk.model.ob_credit_debit_code1 import OBCreditDebitCode1
from open_banking_account_and_transaction_python_sdk.model.ob_currency_exchange5 import OBCurrencyExchange5
from open_banking_account_and_transaction_python_sdk.model.ob_entry_status1_code import OBEntryStatus1Code
from open_banking_account_and_transaction_python_sdk.model.ob_merchant_details1 import OBMerchantDetails1
from open_banking_account_and_transaction_python_sdk.model.ob_supplementary_data1 import OBSupplementaryData1
from open_banking_account_and_transaction_python_sdk.model.ob_transaction_card_instrument1 import OBTransactionCardInstrument1
from open_banking_account_and_transaction_python_sdk.model.ob_transaction_cash_balance import OBTransactionCashBalance
from open_banking_account_and_transaction_python_sdk.model.ob_transaction_mutability1_code import OBTransactionMutability1Code
from open_banking_account_and_transaction_python_sdk.model.proprietary_bank_transaction_code_structure1 import ProprietaryBankTransactionCodeStructure1
from open_banking_account_and_transaction_python_sdk.model.statement_reference import StatementReference
from open_banking_account_and_transaction_python_sdk.model.transaction_id import TransactionId
from open_banking_account_and_transaction_python_sdk.model.transaction_information import TransactionInformation
from open_banking_account_and_transaction_python_sdk.model.transaction_reference import TransactionReference
