# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from open_banking_account_and_transaction_python_sdk import schemas  # noqa: F401


class OBReadProduct2DataProductItemOtherProductTypeProductDetailsSegment(
    schemas.ListSchema
):
    """NOTE:
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class items(
            schemas.EnumBase,
            schemas.StrSchema
        ):
            
            @schemas.classproperty
            def GEAS(cls):
                return cls("GEAS")
            
            @schemas.classproperty
            def GEBA(cls):
                return cls("GEBA")
            
            @schemas.classproperty
            def GEBR(cls):
                return cls("GEBR")
            
            @schemas.classproperty
            def GEBU(cls):
                return cls("GEBU")
            
            @schemas.classproperty
            def GECI(cls):
                return cls("GECI")
            
            @schemas.classproperty
            def GECS(cls):
                return cls("GECS")
            
            @schemas.classproperty
            def GEFB(cls):
                return cls("GEFB")
            
            @schemas.classproperty
            def GEFG(cls):
                return cls("GEFG")
            
            @schemas.classproperty
            def GEG(cls):
                return cls("GEG")
            
            @schemas.classproperty
            def GEGR(cls):
                return cls("GEGR")
            
            @schemas.classproperty
            def GEGS(cls):
                return cls("GEGS")
            
            @schemas.classproperty
            def GEOT(cls):
                return cls("GEOT")
            
            @schemas.classproperty
            def GEOV(cls):
                return cls("GEOV")
            
            @schemas.classproperty
            def GEPA(cls):
                return cls("GEPA")
            
            @schemas.classproperty
            def GEPR(cls):
                return cls("GEPR")
            
            @schemas.classproperty
            def GERE(cls):
                return cls("GERE")
            
            @schemas.classproperty
            def GEST(cls):
                return cls("GEST")
            
            @schemas.classproperty
            def GEYA(cls):
                return cls("GEYA")
            
            @schemas.classproperty
            def GEYO(cls):
                return cls("GEYO")
            
            @schemas.classproperty
            def PSCA(cls):
                return cls("PSCA")
            
            @schemas.classproperty
            def PSES(cls):
                return cls("PSES")
            
            @schemas.classproperty
            def PSNC(cls):
                return cls("PSNC")
            
            @schemas.classproperty
            def PSNP(cls):
                return cls("PSNP")
            
            @schemas.classproperty
            def PSRG(cls):
                return cls("PSRG")
            
            @schemas.classproperty
            def PSSS(cls):
                return cls("PSSS")
            
            @schemas.classproperty
            def PSST(cls):
                return cls("PSST")
            
            @schemas.classproperty
            def PSSW(cls):
                return cls("PSSW")

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'OBReadProduct2DataProductItemOtherProductTypeProductDetailsSegment':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
